
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
 
// Function for modular exponentiation (a^b % mod)
long long power(long long a, long long b, long long mod) {
   long long result = 1;
   a = a % mod;
   while (b > 0) {
       if (b & 1)
           result = (result * a) % mod;
       b = b >> 1;   // Divide b by 2
       a = (a * a) % mod;
   }
   return result;
}
 
// Fermat Primality Test
int isPrimeFermat(int n, int k) {
   if (n <= 1 || n == 4) return 0;
   if (n <= 3) return 1;
 
   // Try k times
   for (int i = 0; i < k; i++) {
       int a = 2 + rand() % (n - 4); // random number in [2, n-2]
       if (power(a, n - 1, n) != 1)
           return 0;  // composite
   }
   return 1; // probably prime
}
 
int main() {
   srand(time(0)); // Seed for random numbers
 
   int n, k;
   printf("Enter number to test: ");
   scanf("%d", &n);
   printf("Enter number of iterations: ");
   scanf("%d", &k);
 
   if (isPrimeFermat(n, k))
       printf("%d is probably prime.\n", n);
   else
       printf("%d is composite.\n", n);
 
   return 0;
}
 
